/* Created by Nikilesh Ramesh on 02/11/2024 at 13:47

Motivation: to create dummy user defined functions for testing the 
gradient computations, this should be ideally generated by MATLAB 
interface
*/

#include "UserDefinedFunctions.h"
#include <cassert>
#include <iostream>

const Cost E_unscaled (const States x0, const States xf, const Inputs u0, const Inputs uf,
    const Time t0, const Time tf
){
    const Cost E = tf; //dummy function xf(1)*uf(1)
    return E;
}


const Cost L_unscaled (const StateVectors X, const InputVectors U, const TimeVector T){
    assert(X.size() == T.size());
    assert(U.size() == T.size());

    Cost L = 0.0;
    for (int i = 0; i < T.size(); i++)
    {
        L += 0;
    }
    
    return (const Cost) L;
}

const StateGradientVectors f_unscaled (const StateVectors X, const InputVectors U, const TimeVector T){

    StateGradientVectors dx;
    dx.reserve(T.size() * X[0].size());

    //Bang Bang internal dynamics
    

    for (int  i = 0; i < T.size(); i++)
    {
        dx.push_back(X[i][1]); // dx1 = x2;
    }
    for (int i = 0; i < T.size(); i++)
    {
        dx.push_back(U[i][0]); // dx2 = u1
    }
    
    //std::cout << dx.size() << std::endl;
    assert(dx.size() == T.size()*X[0].size());
    return (const StateGradientVectors) dx;
}
